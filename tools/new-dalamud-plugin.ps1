Param(
    [Parameter(Mandatory = $true, Position = 0)]
    [string]$Name,

    [Parameter(Mandatory = $false)]
    [string]$Dir = ".",

    [switch]$SkipGitInit
)

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

function Write-Info($msg) { Write-Host "[info] $msg" -ForegroundColor Cyan }
function Write-Warn($msg) { Write-Host "[warn] $msg" -ForegroundColor Yellow }
function Write-Err($msg)  { Write-Host "[err ] $msg" -ForegroundColor Red }

function To-PascalCase([string]$s) {
    if ([string]::IsNullOrWhiteSpace($s)) { return $s }
    $tokens = ($s -split "[^A-Za-z0-9]+") | Where-Object { $_ -ne '' }
    $tokens | ForEach-Object { $_.Substring(0,1).ToUpper() + $_.Substring(1).ToLower() } | Join-String
}

function Test-Cmd($cmd) {
    $null -ne (Get-Command $cmd -ErrorAction SilentlyContinue)
}

# Validate prerequisites
if (-not (Test-Cmd 'git')) { Write-Err 'git が見つかりません。Git for Windows をインストールしてください。'; exit 1 }
if (-not (Test-Cmd 'dotnet')) { Write-Err '.NET SDK が見つかりません。.NET 8 SDK をインストールしてください。'; exit 1 }

$ProjectName = To-PascalCase $Name
$OutDir = Resolve-Path -LiteralPath $Dir
$Dest = Join-Path $OutDir $ProjectName
if (Test-Path $Dest) { Write-Err "出力先が既に存在します: $Dest"; exit 1 }

# Create temp working dir
$TempRoot = [System.IO.Path]::Combine([System.IO.Path]::GetTempPath(), "dalamud-plugin-" + [System.Guid]::NewGuid())
New-Item -ItemType Directory -Path $TempRoot | Out-Null

try {
    # Clone SamplePlugin
    Write-Info 'SamplePlugin を取得中...'
    git clone --depth 1 https://github.com/goatcorp/SamplePlugin.git $TempRoot | Out-Null

    # Remove git metadata
    if (Test-Path (Join-Path $TempRoot '.git')) { Remove-Item -Recurse -Force (Join-Path $TempRoot '.git') }

    # Rename project folder + solution
    Rename-Item -Path (Join-Path $TempRoot 'SamplePlugin') -NewName $ProjectName
    Rename-Item -Path (Join-Path $TempRoot 'SamplePlugin.sln') -NewName ("{0}.sln" -f $ProjectName)

    # Inside project folder: rename csproj + manifest json
    $ProjDir = Join-Path $TempRoot $ProjectName
    Rename-Item -Path (Join-Path $ProjDir 'SamplePlugin.csproj') -NewName ("{0}.csproj" -f $ProjectName)
    Rename-Item -Path (Join-Path $ProjDir 'SamplePlugin.json') -NewName ("{0}.json" -f $ProjectName)

    # Replace content occurrences (SamplePlugin -> $ProjectName)
    $files = Get-ChildItem -Path $TempRoot -Recurse -File | Where-Object { $_.Extension -in '.cs', '.csproj', '.sln', '.json', '.md' }
    foreach ($f in $files) {
        $content = Get-Content -LiteralPath $f.FullName -Raw
        $content = $content -replace 'SamplePlugin', $ProjectName
        $content = $content -replace 'Sample Plugin', ($ProjectName -replace '([a-z])([A-Z])', '$1 $2')
        Set-Content -LiteralPath $f.FullName -Value $content -NoNewline
    }

    # Touch manifest author if empty
    $manifestPath = Join-Path $ProjDir ("{0}.json" -f $ProjectName)
    if (Test-Path $manifestPath) {
        try {
            $json = Get-Content $manifestPath -Raw | ConvertFrom-Json
            if (-not $json.Author -or $json.Author -eq 'your name here') {
                $json.Author = $env:USERNAME
            }
            $json | ConvertTo-Json -Depth 6 | Set-Content -LiteralPath $manifestPath -NoNewline
        } catch { Write-Warn "manifest の更新に失敗: $_" }
    }

    # Move to destination
    Move-Item -Path (Join-Path $TempRoot '*') -Destination $OutDir
    Rename-Item -Path (Join-Path $OutDir $ProjectName) -NewName $ProjectName -Force | Out-Null

    # Init git optionally
    if (-not $SkipGitInit) {
        Push-Location $OutDir
        try {
            git init | Out-Null
            git add .
            git commit -m "chore: scaffold $ProjectName from SamplePlugin" | Out-Null
        } catch { Write-Warn "git 初期化に失敗: $_" }
        Pop-Location
    }

    # Create per-project Justfile
    $just = @"
# Autogenerated for $ProjectName

set shell := ['powershell', '-NoProfile', '-Command']

build-debug:
    dotnet build -c Debug

build-release:
    dotnet build -c Release

zip-release:
    # 出力フォルダ全体をzip（個人利用向け簡易）
    $out = "bin/x64/Release"
    if (!(Test-Path $out)) { Write-Host 'Release ビルドが必要です: just build-release'; exit 1 }
    $zip = Join-Path $out "$ProjectName.zip"
    if (Test-Path $zip) { Remove-Item $zip -Force }
    Compress-Archive -Path (Join-Path $out '*') -DestinationPath $zip
    Write-Host "created: $zip"
"@
    # Place a per-project justfile in the project directory
    Set-Content -LiteralPath (Join-Path $OutDir $ProjectName 'justfile') -Value $just -Force | Out-Null

    Write-Host ""
    Write-Info "作成完了: $Dest"
    Write-Host "次の手順:"
    Write-Host "  1) Visual Studio 2022 で $ProjectName.sln を開く"
    Write-Host "  2) just build-debug でビルド（または IDE から）"
    Write-Host "  3) /xlsettings → Experimental → Dev Plugin Locations に DLL パスを追加"
    Write-Host "  4) /xlplugins → Dev Tools → Installed Dev Plugins から有効化"
}
finally {
    if (Test-Path $TempRoot) { Remove-Item -Recurse -Force $TempRoot }
}
