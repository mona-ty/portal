name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-and-release:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Fetch Dalamud dev libraries
        shell: pwsh
        run: |
          $out = Join-Path $env:RUNNER_TEMP 'dalamud-dev'
          New-Item -ItemType Directory -Force -Path $out | Out-Null
          $zip = Join-Path $env:RUNNER_TEMP 'dalamud_latest.zip'
          Invoke-WebRequest -Uri 'https://goatcorp.github.io/dalamud-distrib/latest.zip' -OutFile $zip
          Expand-Archive -Path $zip -DestinationPath $out -Force
          $libDir = (Get-ChildItem -Path $out -Recurse -Filter 'Dalamud.dll' | Select-Object -First 1).DirectoryName
          if (-not $libDir) { throw 'Dalamud.dll not found in downloaded archive' }
          echo "DALAMUD_LIB_PATH=$libDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: Align manifest (RepoUrl, AssemblyVersion) from tag
        shell: pwsh
        run: |
          $ver = "${{ github.ref_name }}" -replace '^v',''
          $repo = "https://github.com/${{ github.repository }}"
          $path = Join-Path $PWD 'manifest.json'
          $json = Get-Content $path -Raw | ConvertFrom-Json
          if ($json.PSObject.Properties.Name -contains 'RepoUrl') { $json.RepoUrl = $repo }
          if ($json.PSObject.Properties.Name -contains 'AssemblyVersion') { $json.AssemblyVersion = $ver }
          $json | ConvertTo-Json -Depth 4 | Set-Content $path -Encoding UTF8
          Write-Host "Manifest updated: RepoUrl=$repo, AssemblyVersion=$ver"
      - name: Build (Release x64 + package)
        run: |
          $ver = "${{ github.ref_name }}" -replace '^v',''
          dotnet build ./XIVSubmarinesReturn.csproj -c Release -p:Platform=x64 -p:SkipPack=false -p:MakeZip=true -p:Version=$ver -p:AssemblyVersion=$ver -p:FileVersion=$ver --nologo
          echo "::group::Locate artifacts"
          Get-ChildItem -Path bin -Recurse
          echo "::endgroup::"
        working-directory: ${{ github.workspace }}
      - name: Ensure latest.zip exists (fallback)
        shell: pwsh
        run: |
          $zip = Get-ChildItem -Recurse -Filter latest.zip | Select-Object -First 1
          if ($zip) { Write-Host "latest.zip found at $($zip.FullName)"; exit 0 }
          Write-Host "latest.zip not found â€” creating fallback archive"
          $dll = Get-ChildItem -Recurse -Filter 'XIVSubmarinesReturn.dll' | Where-Object { $_.FullName -like '*bin*Release*' } | Select-Object -First 1
          if (-not $dll) { throw 'XIVSubmarinesReturn.dll not found in Release outputs' }
          $outDir = $dll.DirectoryName
          $stage = Join-Path $env:RUNNER_TEMP 'xsr_stage'
          $pkgDir = Join-Path $stage 'XIVSubmarinesReturn'
          New-Item -ItemType Directory -Force -Path $pkgDir | Out-Null
          Copy-Item (Join-Path $outDir 'XIVSubmarinesReturn.dll') $pkgDir -Force
          if (Test-Path (Join-Path $outDir 'manifest.json')) { Copy-Item (Join-Path $outDir 'manifest.json') $pkgDir -Force }
          if (Test-Path (Join-Path $outDir 'icon.png')) { Copy-Item (Join-Path $outDir 'icon.png') $pkgDir -Force }
          $dest = Join-Path $outDir 'latest.zip'
          if (Test-Path $dest) { Remove-Item $dest -Force }
          Compress-Archive -Path (Join-Path $stage '*') -DestinationPath $dest
          Write-Host "created: $dest"
      - name: Locate artifact
        id: loc
        shell: pwsh
        run: |
          $zip = Get-ChildItem -Recurse -Filter latest.zip | Select-Object -First 1
          if (-not $zip) { throw "latest.zip not found" }
          "zip=$($zip.FullName)" >> $env:GITHUB_OUTPUT
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.loc.outputs.zip }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
